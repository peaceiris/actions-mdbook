name: Release

on:
  push:
    branches:
      - 'release-*'

jobs:
  release:
    runs-on: ubuntu-18.04
    if: github.event.before == '0000000000000000000000000000000000000000'
    steps:

      - uses: actions/checkout@v2

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}"

      - name: Set release env
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          RELEASE_TYPE="${BRANCH_NAME#release-}"
          echo "::set-env name=BRANCH_NAME::${BRANCH_NAME}"
          echo "::set-env name=RELEASE_TYPE::${RELEASE_TYPE}"

      - name: Read .nvmrc
        run: echo "::set-output name=NVMRC::$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - name: Prepare release
        if: github.event.before == '0000000000000000000000000000000000000000'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git fetch origin
          npm run release -- --release-as "${RELEASE_TYPE}" --preset eslint
          git push origin "${BRANCH_NAME}"
          export TAG_NAME="v$(jq -r '.version' ./package.json)"
          git push origin "${TAG_NAME}"
          echo "::set-env name=TAG_NAME::${TAG_NAME}"

      - name: Install hub
        run: |
          HUB_VERSION="2.13.0"
          HUB_NAME="hub-linux-amd64-${HUB_VERSION}"
          HUB_TARBALL="${HUB_NAME}.tgz"
          wget -q "https://github.com/github/hub/releases/download/v${HUB_VERSION}/${HUB_TARBALL}"
          tar -zxvf "./${HUB_TARBALL}"
          mkdir ~/bin
          cp "./${HUB_NAME}/bin/hub" ~/bin/
          echo "::add-path::~/bin/"
          rm -rf "./${HUB_NAME}" "./${HUB_TARBALL}"

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git diff HEAD^ ./CHANGELOG.md | grep "^+" | sed -e '1d' | sed -e 's/^+//g' > ./release_notes.md
          sed -i "1iRelease ${TAG_NAME}\n" ./release_notes.md
          hub release create \
            --draft \
            --prerelease \
            --file ./release_notes.md \
            "${TAG_NAME}"

      - name: Open Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BASE_REF="${{ github.event.base_ref }}"
          BASE_BRANCH="${BASE_BRANCH#refs/heads/}"
          USER_ID="${GITHUB_REPOSITORY%/*}"
          hub pull-request \
            --draft \
            --base "${USER_ID}:${BASE_BRANCH}" \
            --head ${USER_ID}:"${BRANCH_NAME}" \
            --message "Release ${TAG_NAME}"
